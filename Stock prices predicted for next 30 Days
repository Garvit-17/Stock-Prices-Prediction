import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
from pandas.plotting import lag_plot
from datetime import datetime
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Load the dataset
df = pd.read_csv("TSLA.csv")
df.head(5)

# Plot autocorrelation and stock price over time
plt.figure()
lag_plot(df['Open'], lag=3)
plt.title('TESLA Stock - Autocorrelation plot with lag = 3')
plt.show()

#plt.plot(df["Date"], df["Close"])
#plt.xticks(np.arange(0, 252, 50), df['Date'][0:252:50])
#plt.title("TESLA stock price over time")
#plt.xlabel("time")
#plt.ylabel("price")
#plt.show()

# Split data into training and testing sets
train_data, test_data = df[0:int(len(df)*0.7)], df[int(len(df)*0.7):]
training_data = train_data['Close'].values
test_data = test_data['Close'].values
history = [x for x in training_data]

# Model predictions for future prices
future_predictions = []
N_future_observations = 30  # Adjust the number of future observations you want to predict

for time_point in range(N_future_observations):
    model = ARIMA(history, order=(10, 1, 0))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = output[0]
    future_predictions.append(yhat)
    history.append(yhat)  # Use the predicted value for the next prediction

# Plot the future price predictions
future_range = np.arange(len(df), len(df) + N_future_observations)
plt.plot(future_range, future_predictions, color='green', marker='o', linestyle='dashed', label='Future Predicted Price')
plt.title('TESLA Future Prices Prediction')
plt.xlabel('Date')
plt.ylabel('Prices')
plt.legend()
plt.show()
